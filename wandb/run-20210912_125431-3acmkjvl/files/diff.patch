diff --git a/__pycache__/models.cpython-38.pyc b/__pycache__/models.cpython-38.pyc
index 72f5f336..4e9cbcb0 100644
Binary files a/__pycache__/models.cpython-38.pyc and b/__pycache__/models.cpython-38.pyc differ
diff --git a/data_preperation.py b/data_preperation.py
index 513f776d..3ef09fe6 100644
--- a/data_preperation.py
+++ b/data_preperation.py
@@ -145,11 +145,9 @@ def test_threshold(args):
 
 def wav_assortment(dst_root):
     audio_csv = pd.read_csv('bird_songs_metadata.csv')
-    # print(audio_wav.shape)
-    # print(audio_wav.columns)
-    # print(audio_wav.dtypes)
-    # print(audio_wav.isnull().any())
+
     all_ids = audio_csv['id']
+    # arrange the wav files inside a folder with the name of species
     for idx, id in all_ids.iteritems():
         title = audio_csv['species'][idx]
         destination = dst_root+"/"+title
@@ -166,8 +164,8 @@ def wav_assortment(dst_root):
             os.remove(path_to_file)
 
 
-if __name__ == '__main__':
-    # wav_assortment("wavfiles") # Run only once
+if __name__ == '__main__':  # (Run it 3 times)
+    # wav_assortment("wavfiles") # Run only once. comment out after use (1st run)
     parser = argparse.ArgumentParser(description='Cleaning audio data')
     parser.add_argument('--src_root', type=str, default='wavfiles',
                         help='directory of audio files in total duration')
@@ -176,13 +174,14 @@ if __name__ == '__main__':
     parser.add_argument('--delta_time', '-dt', type=float, default=1.0,
                         help='time in seconds to sample audio')
     parser.add_argument('--sr', type=int, default=16000,
-                        help='rate to downsample audio')
+                        help='rate to downsample audio. 16000 is the number of samples taken per second')
 
     parser.add_argument('--fn', type=str, default='12577-0',
                         help='file to plot over time to check magnitude')
-    parser.add_argument('--threshold', type=str, default=100,
-                        help='threshold magnitude for np.int16 dtype')
+    parser.add_argument('--threshold', type=str, default=50,
+                        help='threshold magnitude for np.int16 dtype (with threshold to 50 creates more accurate filter)')
     args, _ = parser.parse_known_args()
 
-    # test_threshold(args)
-    split_wavs(args)
+    # comment out after use
+    # test_threshold(args) # (2nd run)
+    split_wavs(args)  # (3rd run)
diff --git a/models.py b/models.py
index ed6a0285..c14c1b4c 100644
--- a/models.py
+++ b/models.py
@@ -2,11 +2,13 @@ from tensorflow.keras import layers
 from tensorflow.keras.layers import TimeDistributed, LayerNormalization
 from tensorflow.keras.models import Model
 from tensorflow.keras.regularizers import l2
-import kapre
 from kapre.composed import get_melspectrogram_layer
 import tensorflow as tf
 import os
 
+# Convolution applies a filter (multiplication of a set of weights) in the input (audio wav files)
+#
+
 
 def Conv1D(N_CLASSES=10, SR=16000, DT=1.0):
     input_shape = (int(SR*DT), 1)
@@ -20,26 +22,28 @@ def Conv1D(N_CLASSES=10, SR=16000, DT=1.0):
                                  return_decibel=True,
                                  input_data_format='channels_last',
                                  output_data_format='channels_last')
-    x = LayerNormalization(axis=2, name='batch_norm')(i.output)
+    # Normalize the filter applies of the previous layer for each given example in a batch independently
+    x = LayerNormalization(axis=1, name='batch_norm')(i.output)
+
     x = TimeDistributed(layers.Conv1D(16, kernel_size=(
         4), activation='relu'), name='td_conv_1d_relu_1')(x)
-    x = layers.MaxPooling2D(pool_size=(2, 2), name='max_pool_2d_2')(x)
+    x = layers.MaxPooling1D(pool_size=(2, 2), name='max_pool_2d_1')(x)
 
     x = TimeDistributed(layers.Conv1D(32, kernel_size=(
         4), activation='relu'), name='td_conv_1d_relu_2')(x)
-    x = layers.MaxPooling2D(pool_size=(2, 2), name='max_pool_2d_3')(x)
+    x = layers.MaxPooling1D(pool_size=(2, 2), name='max_pool_2d_2')(x)
 
     x = TimeDistributed(layers.Conv1D(64, kernel_size=(
         4), activation='relu'), name='td_conv_1d_relu_3')(x)
-    x = layers.MaxPooling2D(pool_size=(2, 2), name='max_pool_2d_4')(x)
+    x = layers.MaxPooling1D(pool_size=(2, 2), name='max_pool_2d_3')(x)
 
     x = TimeDistributed(layers.Conv1D(128, kernel_size=(
         4), activation='relu'), name='td_conv_1d_relu_4')(x)
-    x = layers.MaxPooling2D(pool_size=(2, 2), name='max_pool_2d_5')(x)
+    x = layers.MaxPooling1D(pool_size=(2, 2), name='max_pool_2d_4')(x)
 
     x = TimeDistributed(layers.Conv1D(256, kernel_size=(
         4), activation='relu'), name='td_conv_1d_relu_5')(x)
-    x = layers.GlobalMaxPooling2D(name='global_max_pooling_2d')(x)
+    x = layers.GlobalMaxPooling1D(name='global_max_pooling_2d')(x)
 
     x = layers.Dropout(rate=0.1, name='dropout')(x)
 
@@ -71,17 +75,17 @@ def Conv2D(N_CLASSES=10, SR=16000, DT=1.0):
     x = layers.Conv2D(16, kernel_size=(5, 5), activation='relu',
                       padding='same', name='conv2d_relu_1')(x)
     x = layers.MaxPooling2D(pool_size=(
-        2, 2), padding='same', name='max_pool_2d_2')(x)
+        2, 2), padding='same', name='max_pool_2d_1')(x)
 
     x = layers.Conv2D(32, kernel_size=(3, 3), activation='relu',
                       padding='same', name='conv2d_relu_2')(x)
     x = layers.MaxPooling2D(pool_size=(
-        2, 2), padding='same', name='max_pool_2d_3')(x)
+        2, 2), padding='same', name='max_pool_2d_2')(x)
 
     x = layers.Conv2D(64, kernel_size=(3, 3), activation='relu',
                       padding='same', name='conv2d_relu_3')(x)
     x = layers.MaxPooling2D(pool_size=(
-        2, 2), padding='same', name='max_pool_2d_4')(x)
+        2, 2), padding='same', name='max_pool_2d_3')(x)
 
     x = layers.Conv2D(128, kernel_size=(3, 3), activation='relu',
                       padding='same', name='conv2d_relu_4')(x)
diff --git a/notebooks/Confusion Matrix and ROC.ipynb b/notebooks/Confusion Matrix and ROC.ipynb
deleted file mode 100644
index bf18fe99..00000000
--- a/notebooks/Confusion Matrix and ROC.ipynb	
+++ /dev/null
@@ -1,97 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "source": [
-    "# https://scikit-learn.org/stable/auto_examples/model_selection/plot_roc.html#sphx-glr-auto-examples-model-selection-plot-roc-py\r\n",
-    "\r\n",
-    "import pandas as pd\r\n",
-    "import numpy as np\r\n",
-    "from sklearn.metrics import confusion_matrix \r\n",
-    "from glob import glob\r\n",
-    "from sklearn.preprocessing import LabelEncoder\r\n",
-    "from tensorflow.keras.utils import to_categorical\r\n",
-    "import os\r\n",
-    "import matplotlib.pyplot as plt\r\n",
-    "import seaborn as sns"
-   ],
-   "outputs": [],
-   "metadata": {}
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 16,
-   "source": [
-    "y_pred = np.load('../logs/y_pred.npy')\r\n",
-    "\r\n",
-    "wav_paths = glob('{}/**'.format('../wavfiles'), recursive=True)\r\n",
-    "wav_paths = sorted([x.replace(os.sep, '/') for x in wav_paths if '.wav' in x])\r\n",
-    "classes = sorted(os.listdir('../wavfiles'))\r\n",
-    "labels = [os.path.split(x)[0].split('/')[-1] for x in wav_paths]\r\n",
-    "\r\n",
-    "le = LabelEncoder()\r\n",
-    "y_true = le.fit_transform(labels)\r\n",
-    "y_hot = to_categorical(y_true)\r\n",
-    "y_pred_le = np.argmax(y_pred, axis=1)\r\n",
-    "y_pred_labels = [classes[x] for x in y_pred_le]\r\n",
-    "y_true_labels = [classes[x] for x in y_true]\r\n",
-    "\r\n",
-    "unique_labels = np.unique(labels)\r\n"
-   ],
-   "outputs": [],
-   "metadata": {}
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 17,
-   "source": [
-    "conf_mat = confusion_matrix(y_true_labels, y_pred_labels, labels=unique_labels)\r\n",
-    "df_cm = pd.DataFrame(conf_mat, index = unique_labels,\r\n",
-    "                     columns = unique_labels)\r\n",
-    "plt.figure(figsize = (10,8))\r\n",
-    "plt.title('Confusion Matrix')\r\n",
-    "sns.heatmap(df_cm, annot=True, cmap='viridis')\r\n",
-    "plt.show()"
-   ],
-   "outputs": [
-    {
-     "output_type": "display_data",
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 720x576 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     }
-    }
-   ],
-   "metadata": {}
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "name": "python3",
-   "display_name": "Python 3.8.5 64-bit ('base': conda)"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.5"
-  },
-  "interpreter": {
-   "hash": "b3ba2566441a7c06988d0923437866b63cedc61552a5af99d1f4fb67d367b25f"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 2
-}
\ No newline at end of file
diff --git a/notebooks/Google Slides Plots.ipynb b/notebooks/Google Slides Plots.ipynb
index f938c60a..69ea18a2 100644
--- a/notebooks/Google Slides Plots.ipynb	
+++ b/notebooks/Google Slides Plots.ipynb	
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 1,
    "source": [
     "import os\r\n",
     "\r\n",
@@ -19,7 +19,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 2,
    "source": [
     "stft_model = Sequential()\r\n",
     "stft_model.add(kapre.STFT(n_fft=512, hop_length=160, input_shape=(1, 16000)))\r\n",
@@ -32,7 +32,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 3,
    "source": [
     "def plot_signals_time(titles, signals):\r\n",
     "    nrows, ncols = 2, 5\r\n",
@@ -53,7 +53,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 4,
    "source": [
     "src_root = '../clean'\r\n",
     "\r\n",
@@ -90,9 +90,9 @@
      "output_type": "stream",
      "name": "stdout",
      "text": [
-      "WARNING:tensorflow:Model was constructed with shape (None, 1, 16000) for input KerasTensor(type_spec=TensorSpec(shape=(None, 1, 16000), dtype=tf.float32, name='stft_4_input'), name='stft_4_input', description=\"created by layer 'stft_4_input'\"), but it was called on an input with incompatible shape (None, 16000, 1).\n",
+      "WARNING:tensorflow:Model was constructed with shape (None, 1, 16000) for input KerasTensor(type_spec=TensorSpec(shape=(None, 1, 16000), dtype=tf.float32, name='stft_input'), name='stft_input', description=\"created by layer 'stft_input'\"), but it was called on an input with incompatible shape (None, 16000, 1).\n",
       "WARNING:tensorflow:Model was constructed with shape (None, 1, 16000) for input KerasTensor(type_spec=TensorSpec(shape=(None, 1, 16000), dtype=tf.float32, name='melspectrogram_input'), name='melspectrogram_input', description=\"created by layer 'melspectrogram_input'\"), but it was called on an input with incompatible shape (None, 16000, 1).\n",
-      "WARNING:tensorflow:Model was constructed with shape (None, 1, 16000) for input KerasTensor(type_spec=TensorSpec(shape=(None, 1, 16000), dtype=tf.float32, name='stft_5_input'), name='stft_5_input', description=\"created by layer 'stft_5_input'\"), but it was called on an input with incompatible shape (None, 16000, 1).\n"
+      "WARNING:tensorflow:Model was constructed with shape (None, 1, 16000) for input KerasTensor(type_spec=TensorSpec(shape=(None, 1, 16000), dtype=tf.float32, name='stft_1_input'), name='stft_1_input', description=\"created by layer 'stft_1_input'\"), but it was called on an input with incompatible shape (None, 16000, 1).\n"
      ]
     },
     {
@@ -112,7 +112,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 5,
    "source": [
     "rate, wav = wavfile.read(os.path.join(\r\n",
     "    src_root, 'cardinalis', '11713-0_0.wav'))\r\n",
@@ -142,7 +142,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 6,
    "source": [
     "fft = np.fft.rfft(wav)\r\n",
     "plt.plot(np.abs(fft)/np.sum(np.abs(fft)))\r\n",
diff --git a/notebooks/Plot History.ipynb b/notebooks/Plot History.ipynb
index b5f23caf..6d1a4483 100644
--- a/notebooks/Plot History.ipynb	
+++ b/notebooks/Plot History.ipynb	
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": null,
    "source": [
     "import os\r\n",
     "import matplotlib.pyplot as plt\r\n",
@@ -13,7 +13,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": null,
    "source": [
     "log_csvs = sorted(os.listdir('../logs'))\r\n",
     "print(log_csvs)\r\n",
